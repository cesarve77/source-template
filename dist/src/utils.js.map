{"version":3,"sources":["../../src/utils.js"],"names":["getOnlyComments","template","match","removeComments","replace","buildSchemaObjFromHandlebarAST","program","prefix","obj","body","forEach","statement","type","path","original","String","params","Array","Object","Boolean","getType","toLowerCase","Number","improveSchemaObjFromDoctrine","schemaObj","onlyComments","comment","ast","parse","recoverable","sloppy","unwrap","tags","tag","optional","name","allowedValues","elements","map","ele","value","defaultValue","expression","minCount","label","description","solveTemplate","data","compile","getSchema","fallbackCopyTextToClipboard","text","Promise","resolve","reject","textArea","document","createElement","style","height","width","position","top","appendChild","focus","select","successful","execCommand","err","removeChild","copyTextToClipboard","navigator","clipboard","writeText"],"mappings":"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","file":"utils.js","sourcesContent":["/**\n * Created by cesar on 21/3/18.\n */\nimport doctrine from \"doctrine\"\nimport SimpleSchema from 'simpl-schema'\nimport Handlebars from 'handlebars'\n\n\nconst getOnlyComments = (template) => {\n    return template.match(/\\/\\*\\*[\\s\\S]+?\\*\\//g) || []\n}\nexport const removeComments = (template) => {\n    return template.replace(/\\/\\*\\*[\\s\\S]+?\\*\\/\\n?/g, '')\n}\nconst buildSchemaObjFromHandlebarAST = (program, prefix = '') => {\n    let obj = {}\n    if (prefix) prefix = prefix + '.'\n    program.body.forEach((statement) => {\n        if (statement.type === 'MustacheStatement') {\n            obj[prefix + statement.path.original] = {type: String}\n        }\n        if (statement.type === 'BlockStatement' && statement.path.original === 'each') {\n            obj[prefix + statement.params[0].original] = {type: Array}\n            obj[prefix + statement.params[0].original + '.$'] = {type: Object}\n            obj = {...obj, ...buildSchemaObjFromHandlebarAST(statement.program, statement.params[0].original + '.$')}\n        }\n        if (statement.type === 'BlockStatement' && statement.path.original === 'if') {\n            obj[prefix + statement.params[0].original] = Boolean\n        }\n    })\n    return obj\n}\n\nconst getType = (type) => {\n    if (!type) return String\n    type = type.toLowerCase()\n    switch (type) {\n        case 'string':\n            return String\n\n        case 'boolean':\n            return Boolean\n\n        case 'number':\n            return Number\n\n        case 'object':\n            return Object\n\n        case 'array':\n            return Array\n        default:\n            return String\n    }\n}\nconst improveSchemaObjFromDoctrine = (schemaObj, template) => {\n    const onlyComments = getOnlyComments(template)\n    onlyComments.forEach((comment) => {\n        const ast = doctrine.parse(comment, {\n            recoverable: true,\n            sloppy: true,\n            unwrap: true,\n        })\n        ast.tags.forEach((tag) => {\n            const optional = tag.type.type === 'OptionalType'\n            const name = tag.name.replace(/\\[\\]/gi, '.$')\n            schemaObj[name].optional = optional\n\n            if (tag.type.type === 'UnionType') {\n                const allowedValues = tag.type.elements.map((ele) => ele.value)\n                schemaObj[name].allowedValues = allowedValues\n                schemaObj[name].defaultValue = allowedValues[0]\n            }\n            let type = schemaObj[name].type\n            if (type !== Array) {\n                type = getType(tag.type.name || tag.type.expression && tag.type.expression.name)\n            } else {\n                if (!optional) {\n                    schemaObj[name].minCount = 1\n                }\n            }\n            schemaObj[name].type = type\n            schemaObj[name].label = tag.description\n\n        })\n    })\n}\n\nexport const solveTemplate = (template, data) => {\n    return Handlebars.compile(template)(data)\n}\n\nexport const getSchema = (template) => {\n    const ast = Handlebars.parse(template);\n    const schemaObj = buildSchemaObjFromHandlebarAST(ast)\n    improveSchemaObjFromDoctrine(schemaObj, template)\n    return new SimpleSchema(schemaObj)\n\n}\n\nconst fallbackCopyTextToClipboard = (text) => {\n    return new Promise((resolve, reject) => {\n        const textArea = document.createElement(\"textarea\");\n        textArea.value = text;\n        textArea.style.height = '0'\n        textArea.style.width = '0'\n        textArea.style.position = 'absolute'\n        textArea.style.top = '-100000px'\n        document.body.appendChild(textArea);\n        textArea.focus();\n        textArea.select();\n        try {\n            const successful = document.execCommand('copy');\n            resolve()\n        } catch (err) {\n            reject(err)\n        }\n        document.body.removeChild(textArea);\n\n    })\n\n}\nexport const copyTextToClipboard = (text) => {\n    if (!navigator.clipboard) {\n        return fallbackCopyTextToClipboard(text);\n    }\n    return navigator.clipboard.writeText(text)\n}"]}